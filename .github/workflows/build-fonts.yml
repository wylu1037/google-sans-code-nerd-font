name: Build Google Sans Code Nerd Fonts

on:
  push:
    branches: [ main ]
    paths:
      - 'data/google-sans-code/**'
      - '.github/workflows/build-fonts.yml'
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    paths:
      - 'data/google-sans-code/**'
      - '.github/workflows/build-fonts.yml'
  workflow_dispatch:

jobs:
  build-fonts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install FontForge via Docker approach
      run: |
        # GitHub Actions environment already has Docker pre-installed
        # No need to install Docker again
        
        # Pull the official Nerd Font patcher Docker image
        docker pull nerdfonts/patcher:latest
        
        # Verify Docker setup
        docker --version
        docker images | grep nerdfonts
        
    - name: Create output directory
      run: |
        mkdir -p output/patched-fonts
        
    - name: Patch fonts using Docker
      run: |
        echo "Starting font processing with Docker..."
        
        # Set up absolute paths for Docker volumes
        INPUT_DIR=$(realpath data/google-sans-code/static)
        OUTPUT_DIR=$(realpath output/patched-fonts)
        
        echo "Input directory: $INPUT_DIR"
        echo "Output directory: $OUTPUT_DIR"
        
        # List input fonts
        echo "Input fonts to process:"
        ls -la "$INPUT_DIR"/*.ttf
        
        # Process fonts using official Nerd Fonts patcher Docker image
        # Using --complete flag to include all icon sets as recommended by Nerd Fonts
        # Source: https://github.com/ryanoasis/nerd-fonts
        # This adds 3600+ icons from Font Awesome, Material Design, Octicons, etc.
        docker run --rm \
          -v "$INPUT_DIR":/in \
          -v "$OUTPUT_DIR":/out \
          nerdfonts/patcher:latest \
          --complete \
          --quiet

        # Show processing results
        echo "Processed font files:"
        ls -la "$OUTPUT_DIR"/
        
        # Debug: Check what fonts were actually generated
        echo "Checking generated font names:"
        find "$OUTPUT_DIR" -name "*.ttf" -exec basename {} \;
        
    - name: Verify patched fonts
      run: |
        cd output/patched-fonts
        echo "Verifying font file integrity..."
        
        font_count=$(find . -name "*.ttf" | wc -l)
        echo "Generated font file count: $font_count"
        
        if [ $font_count -eq 0 ]; then
          echo "Error: No font files generated"
          echo "Checking for any output files:"
          ls -la .
          exit 1
        fi
        
        # Check each font file size
        for font in *.ttf; do
          if [ -f "$font" ]; then
            size=$(stat -c%s "$font")
            echo "$font: ${size} bytes"
            
            # Font files should be larger than 1MB (will be larger with icons)
            if [ $size -lt 1048576 ]; then
              echo "Warning: $font may be incomplete (less than 1MB)"
            fi
          fi
        done
        
    - name: Create release archive
      run: |
        cd output
        
        # Create font info file
        cat > patched-fonts/README.txt << 'EOL'
        Google Sans Code Nerd Font
        ==========================
        
        This package contains Google Sans Code Nerd Font versions with 3600+ programming-related icons.
        
        Font files included:
        - Support for all original weights (Light, Regular, Medium, SemiBold, Bold, ExtraBold)
        - Italic variants included
        - Complete Nerd Font icon set added
        
        Installation:
        macOS (Homebrew):
          brew install font-google-sans-code-nerd
        
        Manual Installation:
        1. Extract all .ttf files
        2. Double-click font files to install to system
        3. Use font family name "Google Sans Code Nerd" in applications
        
        VS Code Configuration:
        {
          "editor.fontFamily": "'Google Sans Code Nerd'"
        }
        
        More info: https://github.com/$GITHUB_REPOSITORY
        EOL
        
        echo "Build time: $(date)" >> patched-fonts/README.txt
        
        # Create release package
        zip -r "GoogleSansCodeNerdFont-$(date +%Y%m%d-%H%M).zip" patched-fonts/
        
        echo "Release package created:"
        ls -la *.zip
        
    - name: Upload google-sans-code-nerd-font
      uses: actions/upload-artifact@v4
      with:
        name: google-sans-code-nerd-font
        path: output/patched-fonts/
        retention-days: 90

  test-nerd-fonts:
    needs: build-fonts
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Download built fonts
      uses: actions/download-artifact@v4
      with:
        name: google-sans-code-nerd-font
        path: test-fonts/
        
    - name: Install font analysis tools
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y fontconfig fonttools
          pip install fonttools[unicode]
        elif [ "$RUNNER_OS" == "Windows" ]; then
          pip install fonttools[unicode]
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install fonttools
          pip install fonttools[unicode]
        fi
      shell: bash
      
    - name: Test font metadata and Nerd Font icons
      run: |
        cd test-fonts
        echo "=== Font Analysis Report ==="
        
        # Test each font file
        for font in *.ttf; do
          if [ -f "$font" ]; then
            echo
            echo "Testing font: $font"
            echo "----------------------------------------"
            
            # Basic font info
            echo "Font size: $(stat -c%s "$font" 2>/dev/null || stat -f%z "$font" 2>/dev/null || echo "unknown") bytes"
            
            # Use fonttools to analyze font
            echo "Font family name:"
            python -c "
        from fontTools.ttLib import TTFont
        import sys
        try:
            font = TTFont('$font')
            name_table = font['name']
            for record in name_table.names:
                if record.nameID == 1:  # Font Family name
                    try:
                        print(f'  {record.toUnicode()}')
                        break
                    except:
                        pass
        except Exception as e:
            print(f'  Error reading font: {e}')
            " || echo "  Could not read font metadata"
            
            # Test for key Nerd Font icons (from cheat sheet)
            echo "Testing Nerd Font icons presence:"
            python -c "
        from fontTools.ttLib import TTFont
        import sys
        
        # Key Nerd Font icons to test (Unicode code points from nerdfonts.com/cheat-sheet)
        test_icons = {
            0xe702: 'nf-dev-git_branch',           # Git branch
            0xf015: 'nf-fa-home',                  # Home
            0xf07c: 'nf-fa-folder',                # Folder  
            0xf016: 'nf-fa-file_o',                # File
            0xe235: 'nf-fae-python',               # Python
            0xe60e: 'nf-dev-javascript',           # JavaScript
            0xf113: 'nf-fa-github',                # GitHub
            0xf0c3: 'nf-fa-linux',                 # Linux
            0xf179: 'nf-fa-apple',                 # Apple
            0xf17a: 'nf-fa-windows',               # Windows
        }
        
        try:
            font = TTFont('$font')
            cmap = font.getBestCmap()
            found_icons = 0
            
            for codepoint, icon_name in test_icons.items():
                if codepoint in cmap:
                    print(f'  ✓ {icon_name} (U+{codepoint:04X})')
                    found_icons += 1
                else:
                    print(f'  ✗ {icon_name} (U+{codepoint:04X}) - MISSING')
            
            print(f'  Found {found_icons}/{len(test_icons)} test icons')
            
            # Count total glyphs
            total_glyphs = len(cmap)
            print(f'  Total glyphs in font: {total_glyphs}')
            
            # Nerd Fonts should have significantly more glyphs than original
            if total_glyphs < 1000:
                print(f'  ⚠️  WARNING: Low glyph count, might not be properly patched')
            else:
                print(f'  ✓ Good glyph count indicates successful patching')
                
        except Exception as e:
            print(f'  Error analyzing font: {e}')
            sys.exit(1)
            " || echo "  Could not analyze font icons"
          fi
        done
      shell: bash
      
    - name: Test font installation (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd test-fonts
        echo
        echo "=== Font Installation Test ==="
        
        # Create temporary font directory
        mkdir -p ~/.local/share/fonts
        cp *.ttf ~/.local/share/fonts/
        
        # Update font cache
        if command -v fc-cache >/dev/null 2>&1; then
          fc-cache -f -v
          echo "Font cache updated"
          
          # List installed Google Sans Code Nerd Font
          echo "Checking font recognition:"
          fc-list | grep -i "google.*sans.*code" || echo "Font not detected by fontconfig"
        else
          echo "fontconfig not available, skipping cache test"
        fi
      shell: bash
      
    - name: Test font installation (Windows)
      if: runner.os == 'Windows'
      run: |
        cd test-fonts
        echo ""
        echo "=== Font Installation Test (Windows) ==="
        
        # Test if fonts can be read by Windows
        foreach ($font in Get-ChildItem -Filter "*.ttf") {
          echo "Testing Windows font compatibility: $($font.Name)"
          try {
            # Try to read font file
            $bytes = [System.IO.File]::ReadAllBytes($font.FullName)
            if ($bytes.Length -gt 0) {
              echo "  ✓ Font file readable by Windows"
            }
          } catch {
            echo "  ✗ Error reading font file: $_"
          }
        }
      shell: pwsh
