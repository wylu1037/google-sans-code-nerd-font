name: Build Google Sans Code Nerd Fonts

on:
  push:
    branches: [ main ]
    paths:
      - 'Google Sans Code/**'
      - 'scripts/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Google Sans Code/**'
      - 'scripts/**'
      - '.github/workflows/**'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      build_type:
        description: '构建类型'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - complete
          - mono
          - propo
      upload_artifacts:
        description: '上传构建产物'
        required: false
        default: true
        type: boolean

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      build_types: ${{ steps.prepare_matrix.outputs.build_types }}
      platforms: ${{ steps.prepare_matrix.outputs.platforms }}
    steps:
    - name: Prepare build matrix
      id: prepare_matrix
      run: |
        if [ "${{ github.event.inputs.build_type }}" = "all" ] || [ -z "${{ github.event.inputs.build_type }}" ]; then
          echo 'build_types=["complete", "mono", "propo"]' >> $GITHUB_OUTPUT
        else
          echo 'build_types=["${{ github.event.inputs.build_type }}"]' >> $GITHUB_OUTPUT
        fi
        
        # For release events, build on all platforms; otherwise just Ubuntu
        if [ "${{ github.event_name }}" = "release" ]; then
          echo 'platforms=["ubuntu-latest", "windows-latest", "macos-latest"]' >> $GITHUB_OUTPUT
        else
          echo 'platforms=["ubuntu-latest"]' >> $GITHUB_OUTPUT
        fi

  build:
    runs-on: ${{ matrix.os }}
    needs: prepare
    strategy:
      matrix:
        os: ${{ fromJson(needs.prepare.outputs.platforms) }}
        build_type: ${{ fromJson(needs.prepare.outputs.build_types) }}
      fail-fast: false
    
    name: Build ${{ matrix.build_type }} on ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y fontforge python3-fontforge
        pip install fonttools configparser
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install fontforge
        pip install fonttools configparser
    
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install fontforge -y
        pip install fonttools configparser
      shell: powershell
    
    - name: Cache Nerd Fonts dependencies
      uses: actions/cache@v4
      with:
        path: |
          src/
          !src/config.json
        key: nerd-fonts-v2-${{ runner.os }}-${{ hashFiles('scripts/setup.sh', 'scripts/setup.ps1') }}
        restore-keys: |
          nerd-fonts-v2-${{ runner.os }}-
          nerd-fonts-v2-
    
    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ hashFiles('scripts/setup.sh', 'scripts/setup.ps1') }}
        restore-keys: |
          pip-${{ runner.os }}-
    
    - name: Setup build environment (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x scripts/setup.sh
        ./scripts/setup.sh
    
    - name: Setup build environment (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\scripts\setup.ps1
      shell: powershell
    
    - name: Verify font files and working directory
      run: |
        echo "=== 当前工作目录 ==="
        pwd
        echo ""
        echo "=== 目录结构 ==="
        ls -la
        echo ""
        echo "=== 验证源字体文件 ==="
        if [ -d "Google Sans Code" ]; then
          find "Google Sans Code" -name "*.ttf" -o -name "*.otf" | sort
          echo ""
          echo "=== 字体文件统计 ==="
          echo "TTF 文件数量: $(find "Google Sans Code" -name "*.ttf" | wc -l)"
          echo "OTF 文件数量: $(find "Google Sans Code" -name "*.otf" | wc -l)"
        else
          echo "ERROR: Google Sans Code 目录不存在"
          exit 1
        fi
    
    - name: Build fonts (${{ matrix.build_type }}) on Unix
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x scripts/build.sh
        case "${{ matrix.build_type }}" in
          "complete")
            ./scripts/build.sh --complete --verbose
            ;;
          "mono")
            ./scripts/build.sh --mono --verbose
            ;;
          "propo")
            ./scripts/build.sh --propo --verbose
            ;;
          *)
            echo "未知的构建类型: ${{ matrix.build_type }}"
            exit 1
            ;;
        esac
    
    - name: Build fonts (${{ matrix.build_type }}) on Windows
      if: matrix.os == 'windows-latest'
      run: |
        switch ("${{ matrix.build_type }}") {
          "complete" { .\scripts\build.ps1 -Complete -Verbose }
          "mono" { .\scripts\build.ps1 -Mono -Verbose }
          "propo" { .\scripts\build.ps1 -Propo -Verbose }
          default { 
            Write-Error "未知的构建类型: ${{ matrix.build_type }}"
            exit 1
          }
        }
      shell: powershell
    
    - name: Verify build output (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "=== 构建输出统计 ==="
        if [ -d "patched-fonts" ]; then
          echo "输出字体数量: $(find patched-fonts -name "*.ttf" -o -name "*.otf" | wc -l)"
          echo ""
          echo "=== 输出文件列表 ==="
          find patched-fonts -name "*.ttf" -o -name "*.otf" | sort | head -20
          if [ $(find patched-fonts -name "*.ttf" -o -name "*.otf" | wc -l) -gt 20 ]; then
            echo "... 还有更多文件"
          fi
          echo ""
          echo "=== 目录大小 ==="
          du -sh patched-fonts
        else
          echo "错误: 未找到输出目录"
          exit 1
        fi
    
    - name: Verify build output (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Write-Host "=== 构建输出统计 ==="
        if (Test-Path "patched-fonts") {
          $fontCount = (Get-ChildItem -Path "patched-fonts" -Include "*.ttf", "*.otf" -Recurse).Count
          Write-Host "输出字体数量: $fontCount"
          Write-Host ""
          Write-Host "=== 输出文件列表 ==="
          Get-ChildItem -Path "patched-fonts" -Include "*.ttf", "*.otf" -Recurse | Select-Object -First 20 | ForEach-Object { Write-Host $_.Name }
          if ($fontCount -gt 20) {
            Write-Host "... 还有更多文件"
          }
          Write-Host ""
          Write-Host "=== 目录大小 ==="
          $size = (Get-ChildItem -Path "patched-fonts" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
          Write-Host "${size:F2} MB"
        } else {
          Write-Error "错误: 未找到输出目录"
          exit 1
        }
      shell: powershell
    
    - name: Prepare artifacts (Unix)
      if: (github.event.inputs.upload_artifacts == 'true' || github.event_name == 'release') && matrix.os != 'windows-latest'
      run: |
        # 创建发布包
        cd patched-fonts
        
        # 按构建类型组织文件
        BUILD_TYPE="${{ matrix.build_type }}"
        
        # 创建压缩包
        case "$BUILD_TYPE" in
          "complete")
            zip -r "../GoogleSansCodeNerdFont-Complete-${{ matrix.os }}.zip" . -x "*.DS_Store"
            ;;
          "mono")
            zip -r "../GoogleSansCodeNerdFont-Mono-${{ matrix.os }}.zip" . -x "*.DS_Store"
            ;;
          "propo")
            zip -r "../GoogleSansCodeNerdFont-Propo-${{ matrix.os }}.zip" . -x "*.DS_Store"
            ;;
        esac
        
        cd ..
        
        # 验证压缩包
        echo "=== 压缩包信息 ==="
        ls -lh GoogleSansCodeNerdFont-*.zip 2>/dev/null || echo "未创建压缩包"
    
    - name: Prepare artifacts (Windows)
      if: (github.event.inputs.upload_artifacts == 'true' || github.event_name == 'release') && matrix.os == 'windows-latest'
      run: |
        # 创建发布包
        Set-Location patched-fonts
        
        # 按构建类型组织文件
        $BUILD_TYPE = "${{ matrix.build_type }}"
        
        # 创建压缩包
        switch ($BUILD_TYPE) {
          "complete" { 
            Compress-Archive -Path "." -DestinationPath "..\GoogleSansCodeNerdFont-Complete-${{ matrix.os }}.zip" -CompressionLevel Optimal
          }
          "mono" { 
            Compress-Archive -Path "." -DestinationPath "..\GoogleSansCodeNerdFont-Mono-${{ matrix.os }}.zip" -CompressionLevel Optimal
          }
          "propo" { 
            Compress-Archive -Path "." -DestinationPath "..\GoogleSansCodeNerdFont-Propo-${{ matrix.os }}.zip" -CompressionLevel Optimal
          }
        }
        
        Set-Location ..
        
        # 验证压缩包
        Write-Host "=== 压缩包信息 ==="
        Get-ChildItem GoogleSansCodeNerdFont-*.zip -ErrorAction SilentlyContinue | ForEach-Object { 
          Write-Host "$($_.Name): $([math]::Round($_.Length / 1MB, 2)) MB"
        }
      shell: powershell
    
    - name: Upload artifacts
      if: github.event.inputs.upload_artifacts == 'true' || github.event_name == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: GoogleSansCodeNerdFont-${{ matrix.build_type }}-${{ matrix.os }}
        path: |
          GoogleSansCodeNerdFont-*.zip
          patched-fonts/
        retention-days: 30

  release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # 合并跨平台的相同构建类型（保留最佳质量版本）
        for build_type in complete mono propo; do
          # 优先使用 Ubuntu 构建的版本（兼容性最好）
          if [ -f "artifacts/GoogleSansCodeNerdFont-${build_type}-ubuntu-latest/GoogleSansCodeNerdFont-${build_type^}-ubuntu-latest.zip" ]; then
            cp "artifacts/GoogleSansCodeNerdFont-${build_type}-ubuntu-latest/GoogleSansCodeNerdFont-${build_type^}-ubuntu-latest.zip" "release-assets/GoogleSansCodeNerdFont-${build_type^}.zip"
          # 备选其他平台
          elif [ -f "artifacts/GoogleSansCodeNerdFont-${build_type}-macos-latest/GoogleSansCodeNerdFont-${build_type^}-macos-latest.zip" ]; then
            cp "artifacts/GoogleSansCodeNerdFont-${build_type}-macos-latest/GoogleSansCodeNerdFont-${build_type^}-macos-latest.zip" "release-assets/GoogleSansCodeNerdFont-${build_type^}.zip"
          elif [ -f "artifacts/GoogleSansCodeNerdFont-${build_type}-windows-latest/GoogleSansCodeNerdFont-${build_type^}-windows-latest.zip" ]; then
            cp "artifacts/GoogleSansCodeNerdFont-${build_type}-windows-latest/GoogleSansCodeNerdFont-${build_type^}-windows-latest.zip" "release-assets/GoogleSansCodeNerdFont-${build_type^}.zip"
          fi
        done
        
        # 生成校验和文件
        cd release-assets
        sha256sum *.zip > checksums.sha256
        cd ..
        
        echo "=== 发布资产 ==="
        ls -lh release-assets/
        echo ""
        echo "=== 校验和 ==="
        cat release-assets/checksums.sha256
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        tag_name: ${{ github.ref_name }}
        name: Google Sans Code Nerd Font ${{ github.ref_name }}
        body: |
          ## Google Sans Code Nerd Font ${{ github.ref_name }}
          
          ### 📦 下载说明
          
          - **GoogleSansCodeNerdFont-Complete.zip** - 完整版本，包含所有图标（推荐）
          - **GoogleSansCodeNerdFont-Mono.zip** - 等宽图标版本，适合终端使用
          - **GoogleSansCodeNerdFont-Propo.zip** - 比例宽度图标版本
          - **checksums.sha256** - 文件完整性校验和
          
          ### 🔐 文件验证
          
          下载后请验证文件完整性：
          ```bash
          # Linux/macOS
          sha256sum -c checksums.sha256
          
          # Windows PowerShell
          Get-FileHash *.zip -Algorithm SHA256 | Format-Table
          ```
          
          ### 🎯 包含的图标集
          
          - Font Awesome (5000+ 图标)
          - Material Design Icons (7000+ 图标)
          - Octicons (GitHub 图标)
          - Powerline Symbols
          - Devicons (开发者图标)
          - Weather Icons
          - Codicons (VS Code 图标)
          - 以及更多...
          
          ### 💾 安装方法
          
          #### Windows
          1. 下载对应的 zip 文件
          2. 解压缩
          3. 右键字体文件选择"安装"或"为所有用户安装"
          4. 在应用程序中选择 "GoogleSansCodeNerdFont" 字体
          
          #### macOS
          1. 下载对应的 zip 文件
          2. 解压缩
          3. 双击字体文件并点击"安装字体"
          4. 在应用程序中选择 "GoogleSansCodeNerdFont" 字体
          
          #### Linux
          ```bash
          # 用户安装
          mkdir -p ~/.local/share/fonts
          unzip GoogleSansCodeNerdFont-Complete.zip -d ~/.local/share/fonts/
          fc-cache -fv
          
          # 系统级安装 (需要 sudo)
          sudo unzip GoogleSansCodeNerdFont-Complete.zip -d /usr/share/fonts/
          sudo fc-cache -fv
          ```
          
          ### 🔧 支持的字重
          
          - Regular / Italic
          - Light / Light Italic
          - Medium / Medium Italic
          - SemiBold / SemiBold Italic
          - Bold / Bold Italic
          - ExtraBold / ExtraBold Italic
          
          ---
          
          **构建信息**
          - 构建时间: ${{ github.run_id }}
          - Git 提交: ${{ github.sha }}
          - 发布版本: ${{ github.ref_name }}
          
          🤖 自动构建于 GitHub Actions
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

