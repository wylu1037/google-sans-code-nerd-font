name: Build Google Sans Code Nerd Fonts

on:
  push:
    branches: [ main ]
    paths:
      - 'data/google-sans-code/**'
      - '.github/workflows/build-fonts.yml'
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    paths:
      - 'data/google-sans-code/**'
      - '.github/workflows/build-fonts.yml'
  workflow_dispatch:

jobs:
  build-fonts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        # Install FontForge for ligaturizer
        sudo apt-get update
        sudo apt-get install -y fontforge python3-fontforge
        
        # GitHub Actions environment already has Docker pre-installed
        # Pull the official Nerd Font patcher Docker image
        docker pull nerdfonts/patcher:latest
        
        # Verify setup
        docker --version
        docker images | grep nerdfonts
        fontforge --version
        
    - name: Create output directory
      run: |
        mkdir -p output/ligaturized-fonts
        mkdir -p output/patched-fonts
        
    - name: Setup Ligaturizer
      run: |
        # Download Ligaturizer files
        curl -L https://raw.githubusercontent.com/ToxicFrog/ligaturizer/master/ligaturize.py -o ligaturize.py
        curl -L https://raw.githubusercontent.com/ToxicFrog/ligaturizer/master/ligatures.py -o ligatures.py
        curl -L https://raw.githubusercontent.com/ToxicFrog/ligaturizer/master/char_dict.py -o char_dict.py
        
        # Download Fira Code for ligature source
        mkdir -p fonts/fira/distr/otf
        curl -L https://github.com/tonsky/FiraCode/releases/download/6.2/FiraCode_6.2.zip -o FiraCode.zip
        unzip -q FiraCode.zip "otf/*" -d temp/
        mv temp/otf/* fonts/fira/distr/otf/
        rm -rf temp FiraCode.zip
        
        # Make ligaturize script executable
        chmod +x ligaturize.py
        
        echo "Ligaturizer setup complete"
        ls -la fonts/fira/distr/otf/
        
    - name: Add ligatures to fonts
      run: |
        echo "Adding ligatures to Google Sans Code fonts..."
        
        INPUT_DIR=$(realpath data/google-sans-code/static)
        LIGATURIZED_DIR=$(realpath output/ligaturized-fonts)
        
        echo "Input directory: $INPUT_DIR"
        echo "Ligaturized output directory: $LIGATURIZED_DIR"
        
        # Function to add ligatures to a single font
        ligaturize_font() {
          local font_file="$1"
          local font_name=$(basename "$font_file")
          echo "Adding ligatures to: $font_name"
          
          # Extract style from filename for consistent naming
          local style=$(echo "$font_name" | sed 's/GoogleSansCode-//g' | sed 's/\.ttf$//g')
          echo "Detected style: $style"
          
          # Add ligatures using fontforge
          fontforge -lang=py -script ligaturize.py "$font_file" \
            --output-dir="$LIGATURIZED_DIR" \
            --prefix="GoogleSansCodeLig" \
            --copy-character-glyphs
          
          echo "Completed ligaturization: $font_name"
        }
        
        # Export function for parallel execution  
        export -f ligaturize_font
        export LIGATURIZED_DIR
        
        # Process fonts in parallel for better performance
        find "$INPUT_DIR" -name "*.ttf" -print0 | xargs -0 -I {} -P 4 bash -c 'ligaturize_font "$@"' _ {}
        
        # Show ligaturized results
        echo "Ligaturized font files:"
        ls -la "$LIGATURIZED_DIR"/
        
    - name: Patch fonts using Docker
      run: |
        echo "Starting Nerd Font patching with Docker..."
        
        # Use ligaturized fonts as input for Nerd Font patcher
        LIGATURIZED_DIR=$(realpath output/ligaturized-fonts)
        OUTPUT_DIR=$(realpath output/patched-fonts)
        
        echo "Ligaturized input directory: $LIGATURIZED_DIR"
        echo "Final output directory: $OUTPUT_DIR"
        
        # List ligaturized fonts to process
        echo "Ligaturized fonts to process:"
        ls -la "$LIGATURIZED_DIR"/*.ttf
        
        # Function to process a single ligaturized font file
        process_font() {
          local font_file="$1"
          local font_name=$(basename "$font_file")
          echo "Processing: $font_name"
          
          # Create temporary directory for single font processing
          local temp_input_dir=$(mktemp -d)
          cp "$font_file" "$temp_input_dir/"
          
          # Process with Nerd Font Patcher, maintaining ligature functionality
          docker run --rm \
            -v "$temp_input_dir":/in \
            -v "$OUTPUT_DIR":/out \
            nerdfonts/patcher:latest \
            --complete \
            --quiet \
            --name "Google\ Sans\ Code\ NF"
          
          # Clean up temporary directory
          rm -rf "$temp_input_dir"
          
          echo "Completed processing: $font_name"
        }
        
        # Export function for parallel execution
        export -f process_font
        export OUTPUT_DIR
        
        # Process ligaturized fonts in parallel (4 concurrent jobs for better performance)
        find "$LIGATURIZED_DIR" -name "*.ttf" -print0 | xargs -0 -I {} -P 4 bash -c 'process_font "$@"' _ {}

        # Show processing results
        echo "Final processed font files:"
        ls -la "$OUTPUT_DIR"/
        
        # Debug: Check what fonts were actually generated
        echo "Checking generated font names:"
        find "$OUTPUT_DIR" -name "*.ttf" -exec basename {} \;
        
    - name: Verify patched fonts
      run: |
        cd output/patched-fonts
        echo "Verifying font file integrity..."
        
        font_count=$(find . -name "*.ttf" | wc -l)
        echo "Generated font file count: $font_count"
        
        if [ $font_count -eq 0 ]; then
          echo "Error: No font files generated"
          echo "Checking for any output files:"
          ls -la .
          exit 1
        fi
        
        # Check each font file size
        for font in *.ttf; do
          if [ -f "$font" ]; then
            size=$(stat -c%s "$font")
            echo "$font: ${size} bytes"
            
            # Font files should be larger than 1MB (will be larger with icons)
            if [ $size -lt 1048576 ]; then
              echo "Warning: $font may be incomplete (less than 1MB)"
            fi
          fi
        done
        
    - name: Create release archive
      run: |
        cd output
        
        # Create font info file
        cat > patched-fonts/README.txt << 'EOL'
        Google Sans Code Nerd Font with Ligatures
        =========================================
        
        This package contains Google Sans Code Nerd Font versions with:
        - Programming ligatures (from Fira Code)
        - 3600+ programming-related icons and symbols
        
        Font features:
        - Complete ligature support for programming (==, !=, ->, =>, <=, >=, etc.)
        - All original Google Sans Code weights (Light, Regular, Medium, SemiBold, Bold, ExtraBold)
        - Italic variants included
        - Complete Nerd Font icon set added
        
        Installation:
        macOS (Homebrew):
          brew install font-google-sans-code-nerd
        
        Manual Installation:
        1. Extract all .ttf files
        2. Double-click font files to install to system
        3. Use font family name "Google Sans Code NF" in applications
        
        VS Code Configuration (with ligatures enabled):
        {
          "editor.fontFamily": "'Google Sans Code NF'",
          "editor.fontLigatures": true
        }
        
        Vim/Neovim Configuration:
        set guifont=Google\ Sans\ Code\ NF:h12
        
        More info: https://github.com/$GITHUB_REPOSITORY
        EOL
        
        echo "Build time: $(date)" >> patched-fonts/README.txt
        
        # Create release package
        zip -r "GoogleSansCodeNerdFont-$(date +%Y%m%d-%H%M).zip" patched-fonts/
        
        echo "Release package created:"
        ls -la *.zip
        
    - name: Upload google-sans-code-nerd-font
      uses: actions/upload-artifact@v4
      with:
        name: google-sans-code-nerd-font
        path: output/patched-fonts/
        retention-days: 90
