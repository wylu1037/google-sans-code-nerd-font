name: Build Google Sans Code Nerd Fonts

on:
  push:
    branches: [ main ]
    paths:
      - 'data/google-sans-code/**'
      - '.github/workflows/build-fonts.yml'
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    paths:
      - 'data/google-sans-code/**'
      - '.github/workflows/build-fonts.yml'
  workflow_dispatch:

jobs:
  build-fonts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install FontForge and setup ligature environment
      run: |
        # Install FontForge for ligature processing
        sudo apt-get update
        sudo apt-get install -y fontforge python3-fontforge curl unzip
        
        # Verify FontForge installation
        fontforge --version
        python3 -c "import fontforge; print('FontForge Python module imported successfully')"
        
        # GitHub Actions environment already has Docker pre-installed
        # Pull the official Nerd Font patcher Docker image
        docker pull nerdfonts/patcher:latest
        
        # Verify Docker setup
        docker --version
        docker images | grep nerdfonts
        
    - name: Download and setup Ligaturizer and Fira Code
      run: |
        echo "üì• Downloading Ligaturizer and Fira Code..."
        
        # Create working directories
        mkdir -p tools/ligaturizer
        mkdir -p tools/firacode
        mkdir -p output/ligaturized-fonts
        mkdir -p output/patched-fonts
        
        # Download and setup Ligaturizer
        cd tools/ligaturizer
        curl -L https://raw.githubusercontent.com/ToxicFrog/ligaturizer/master/ligaturize.py -o ligaturize-original.py
        
        # Our fixed version is already in the repo
        cp ../../scripts/ligaturize-fixed.py ./ligaturize.py
        chmod +x ligaturize.py
        
        # Download Fira Code (source of ligatures)
        cd ../firacode
        echo "Downloading Fira Code v6.2..."
        curl -L https://github.com/tonsky/FiraCode/releases/download/6.2/Fira_Code_v6.2.zip -o FiraCode.zip
        unzip -q FiraCode.zip
        
        # Ligaturizer expects OTF files, but Fira Code 6.2 only provides TTF
        # Copy TTF files and rename to OTF for compatibility
        if [ -d "ttf" ]; then
          mkdir -p otf
          for ttf_file in ttf/*.ttf; do
            cp "$ttf_file" "otf/$(basename "$ttf_file" .ttf).otf"
          done
          echo "‚úÖ Created OTF files from TTF for Ligaturizer compatibility"
          ls -la otf/
        else
          echo "‚ùå TTF directory not found in Fira Code archive"
          exit 1
        fi
        
        cd ../..
        echo "‚úÖ Ligaturizer and Fira Code setup complete"
        
    - name: Apply ligatures to fonts
      run: |
        echo "üîó Starting ligature processing..."
        
        INPUT_DIR=$(realpath data/google-sans-code/static)
        LIGATURIZED_DIR=$(realpath output/ligaturized-fonts)
        FIRACODE_DIR=$(realpath tools/firacode/otf)
        LIGATURIZER_SCRIPT=$(realpath tools/ligaturizer/ligaturize.py)
        
        echo "Input directory: $INPUT_DIR"
        echo "Ligaturized output directory: $LIGATURIZED_DIR"
        echo "Fira Code directory: $FIRACODE_DIR"
        
        # List input fonts
        echo "Input fonts to ligaturize:"
        ls -la "$INPUT_DIR"/*.ttf
        
        # Use Fira Code Regular as the ligature source
        FIRA_SOURCE="$FIRACODE_DIR/FiraCode-Regular.otf"
        if [ ! -f "$FIRA_SOURCE" ]; then
          echo "‚ùå Fira Code Regular not found: $FIRA_SOURCE"
          echo "Available Fira Code files:"
          ls -la "$FIRACODE_DIR"/
          exit 1
        fi
        echo "Using ligature source: $FIRA_SOURCE"
        
        # Function to ligaturize a single font
        ligaturize_font() {
          local input_font="$1"
          local font_name=$(basename "$input_font")
          local output_font="$LIGATURIZED_DIR/${font_name%.ttf}-Ligaturized.ttf"
          
          echo "üîó Ligaturizing: $font_name"
          
          if python3 "$LIGATURIZER_SCRIPT" "$input_font" "$FIRA_SOURCE" "$output_font"; then
            echo "‚úÖ Successfully ligaturized: $font_name"
            # Verify output file exists and has reasonable size
            if [ -f "$output_font" ]; then
              size=$(stat -c%s "$output_font")
              echo "   Output size: $size bytes"
              if [ $size -lt 100000 ]; then  # Less than 100KB is suspicious
                echo "‚ö†Ô∏è  Warning: Output file seems too small"
              fi
            else
              echo "‚ùå Output file not created: $output_font"
              return 1
            fi
          else
            echo "‚ùå Failed to ligaturize: $font_name"
            # Fallback: copy original font for Nerd Font processing
            echo "üìã Copying original font as fallback"
            cp "$input_font" "$output_font"
          fi
        }
        
        # Export function for parallel execution
        export -f ligaturize_font
        export LIGATURIZED_DIR FIRA_SOURCE LIGATURIZER_SCRIPT
        
        # Process fonts in parallel (2 concurrent jobs to avoid memory issues)
        find "$INPUT_DIR" -name "*.ttf" -print0 | xargs -0 -I {} -P 2 bash -c 'ligaturize_font "$@"' _ {}
        
        # Show ligaturization results
        echo "üìä Ligaturized font files:"
        ls -la "$LIGATURIZED_DIR"/
        
        ligaturized_count=$(find "$LIGATURIZED_DIR" -name "*.ttf" | wc -l)
        echo "Generated $ligaturized_count ligaturized fonts"
        
        if [ $ligaturized_count -eq 0 ]; then
          echo "‚ùå No ligaturized fonts generated"
          exit 1
        fi
        
    - name: Apply Nerd Font patches to ligaturized fonts
      run: |
        echo "üéØ Starting Nerd Font icon processing..."
        
        # Set up absolute paths for Docker volumes
        LIGATURIZED_DIR=$(realpath output/ligaturized-fonts)
        OUTPUT_DIR=$(realpath output/patched-fonts)
        
        echo "Ligaturized fonts directory: $LIGATURIZED_DIR"
        echo "Final output directory: $OUTPUT_DIR"
        
        # List ligaturized fonts to process
        echo "Ligaturized fonts to process:"
        ls -la "$LIGATURIZED_DIR"/*.ttf || {
          echo "‚ùå No ligaturized fonts found, falling back to original fonts"
          LIGATURIZED_DIR=$(realpath data/google-sans-code/static)
          echo "Using original fonts from: $LIGATURIZED_DIR"
          ls -la "$LIGATURIZED_DIR"/*.ttf
        }
        
        # Process ligaturized fonts using official Nerd Fonts patcher Docker image
        # Using --complete flag to include all icon sets as recommended by Nerd Fonts
        # Source: https://github.com/ryanoasis/nerd-fonts
        # This adds 3600+ icons from Font Awesome, Material Design, Octicons, etc.
        # Function to process a single ligaturized font file
        process_font() {
          local font_file="$1"
          local font_name=$(basename "$font_file")
          echo "üéØ Processing: $font_name"
          
          # Extract style from filename (Bold, Light, Italic, etc.)
          # Handle both original and ligaturized font names
          local style=$(echo "$font_name" | sed 's/GoogleSansCode-//g' | sed 's/-Ligaturized//g' | sed 's/\.ttf$//g')
          echo "Detected style: $style"
          
          # Create temporary directory for single font processing
          local temp_input_dir=$(mktemp -d)
          cp "$font_file" "$temp_input_dir/"
          
          echo "Running Nerd Font patcher with ligature-enhanced font..."
          
          # Process with custom family name but preserve style
          if docker run --rm \
            -v "$temp_input_dir":/in \
            -v "$OUTPUT_DIR":/out \
            nerdfonts/patcher:latest \
            --complete \
            --quiet \
            --name "Google\ Sans\ Code\ NF\ $style"; then
            
            echo "‚úÖ Completed processing: $font_name -> Google Sans Code NF $style"
          else
            echo "‚ùå Failed to process: $font_name"
            # Continue with other fonts even if one fails
          fi
          
          # Clean up temporary directory
          rm -rf "$temp_input_dir"
        }
        
        # Export function for parallel execution
        export -f process_font
        export OUTPUT_DIR
        
        # Process ligaturized fonts in parallel (4 concurrent jobs for better performance)
        find "$LIGATURIZED_DIR" -name "*.ttf" -print0 | xargs -0 -I {} -P 4 bash -c 'process_font "$@"' _ {}

        # Show processing results
        echo "Processed font files:"
        ls -la "$OUTPUT_DIR"/
        
        # Debug: Check what fonts were actually generated
        echo "Checking generated font names:"
        find "$OUTPUT_DIR" -name "*.ttf" -exec basename {} \;
        
    - name: Verify patched fonts
      run: |
        cd output/patched-fonts
        echo "Verifying font file integrity..."
        
        font_count=$(find . -name "*.ttf" | wc -l)
        echo "Generated font file count: $font_count"
        
        if [ $font_count -eq 0 ]; then
          echo "Error: No font files generated"
          echo "Checking for any output files:"
          ls -la .
          exit 1
        fi
        
        # Check each font file size
        for font in *.ttf; do
          if [ -f "$font" ]; then
            size=$(stat -c%s "$font")
            echo "$font: ${size} bytes"
            
            # Font files should be larger than 1MB (will be larger with icons)
            if [ $size -lt 1048576 ]; then
              echo "Warning: $font may be incomplete (less than 1MB)"
            fi
          fi
        done
        
    - name: Create release archive
      run: |
        cd output
        
        # Create font info file
        cat > patched-fonts/README.txt << 'EOL'
        Google Sans Code Nerd Font with Ligatures
        =========================================
        
        This package contains Google Sans Code Nerd Font versions with programming ligatures and 3600+ programming-related icons.
        
        ‚ú® Features:
        - 150+ Programming ligatures from Fira Code (‚Üí, ‚áí, ==, !=, etc.)
        - 3600+ Programming icons from Nerd Fonts
        - Complete icon set from Font Awesome, Material Design, Octicons, etc.
        
        Font files included:
        - Support for all original weights (Light, Regular, Medium, SemiBold, Bold, ExtraBold)
        - Italic variants included
        - Programming ligatures enabled
        - Complete Nerd Font icon set added
        
        Installation:
        macOS (Homebrew):
          brew install font-google-sans-code-nerd
        
        Manual Installation:
        1. Extract all .ttf files
        2. Double-click font files to install to system
        3. Use font family name "Google Sans Code NF" in applications
        
        VS Code Configuration (with ligatures):
        {
          "editor.fontFamily": "'Google Sans Code NF'",
          "editor.fontLigatures": true
        }
        
        Test ligatures:
        -> => <-> == != <= >= && || !! 
        += -= *= /= %= /* */ /** */ ///
        
        More info: https://github.com/$GITHUB_REPOSITORY
        EOL
        
        echo "Build time: $(date)" >> patched-fonts/README.txt
        
        # Create release package
        zip -r "GoogleSansCodeNerdFont-$(date +%Y%m%d-%H%M).zip" patched-fonts/
        
        echo "Release package created:"
        ls -la *.zip
        
    - name: Upload google-sans-code-nerd-font
      uses: actions/upload-artifact@v4
      with:
        name: google-sans-code-nerd-font
        path: output/patched-fonts/
        retention-days: 90
